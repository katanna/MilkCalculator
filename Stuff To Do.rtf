{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Bold;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red155\green35\blue147;
\red15\green104\blue160;\red57\green0\blue160;\red93\green108\blue121;\red50\green109\blue116;\red108\green54\blue169;
\red28\green0\blue207;\red28\green70\blue74;\red196\green26\blue22;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0\c85000;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c60759\c13753\c57628;
\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c22454\c0\c62803;\csgenericrgb\c36526\c42188\c47515;\csgenericrgb\c19418\c42935\c45455;\csgenericrgb\c42190\c21278\c66379;
\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c10981\c27276\c28869;\csgenericrgb\c77000\c10200\c8600;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 New Things:\
	In Main, update all text boxes (circles)\
	Update Fortify to not use scoop\
	Update Fortify for Finish With\
	Update Buy with Volume Unit\
\
\
\
\
\
\
\
Things To Do:\
	Get math to work\
\
\
Variables\
	ViewController\
		Text field: volumeInput\
		SC: volumeUnitSelector\
		button: calculateButton\
\
	Model\
		enum: PumpVolumeUnit\
		PumpVolume\
\
	Settings/Global\
		Pump\
		Fortify\
		Buy\
		Setting\
\
\
\
\
\pard\tx593\pardeftab593\partightenfactor0

\f1 \cf2 \cb3 	
\f2\b \cf4 func
\f1\b0 \cf2  \cf5 findAnswer\cf2  (\cf5 withAnimation\cf2  animate: \cf6 Bool\cf2 ) \{\
	\cf7 //Set Starting Volume\cf2 \
		
\f2\b \cf4 let
\f1\b0 \cf2  startingVolume: \cf6 Double\cf2 ?\
		\
		
\f2\b \cf4 switch
\f1\b0 \cf2  \cf8 fortify\cf2 .\cf8 startOrEnd\cf2  \{\
		
\f2\b \cf4 case
\f1\b0 \cf2  .\cf8 start\cf2 :\
			
\f2\b \cf4 let
\f1\b0 \cf2  volumeUnit: \cf6 UnitVolume\cf2 \
			\
			
\f2\b \cf4 switch
\f1\b0 \cf2  \cf8 fortify\cf2 .\cf8 volumeUnit\cf2  \{\
			
\f2\b \cf4 case
\f1\b0 \cf2  .\cf8 ml\cf2 :\
				volumeUnit = \cf6 UnitVolume\cf2 .\cf9 milliliters\cf2 \
			
\f2\b \cf4 case
\f1\b0 \cf2  .\cf8 oz\cf2 :\
				volumeUnit = \cf6 UnitVolume\cf2 .\cf9 fluidOunces\cf2 \
			\}\
			\
			
\f2\b \cf4 let
\f1\b0 \cf2  volumeAsMeasurement = \cf6 Measurement\cf2 (\cf9 value\cf2 : \cf8 fortify\cf2 .\cf8 volume\cf2 , \cf9 unit\cf2 : volumeUnit)\
			startingVolume = volumeAsMeasurement.\cf9 converted\cf2 (\cf9 to\cf2 : \cf6 UnitVolume\cf2 .\cf9 fluidOunces\cf2 ).\cf9 value\cf2 \
		
\f2\b \cf4 case
\f1\b0 \cf2  .\cf8 end\cf2 :\
			startingVolume = 
\f2\b \cf4 nil
\f1\b0 \cf2 \
		\}\
		\
	\cf7 //Set Starting Concentration\cf2 \
		
\f2\b \cf4 let
\f1\b0 \cf2  startingConcentration: \cf6 Int\cf2 \
		\
		
\f2\b \cf4 switch
\f1\b0 \cf2  \cf8 fortify\cf2 .milkType \{\
		
\f2\b \cf4 case
\f1\b0 \cf2  .\cf8 breast\cf2 :\
			startingConcentration = \cf10 20\cf2 \
		
\f2\b \cf4 case
\f1\b0 \cf2  .\cf8 formula\cf2 :\
			startingConcentration = \cf11 Settings\cf2 .\cf8 formulaConcentration\cf2 \
		
\f2\b \cf4 case
\f1\b0 \cf2  .\cf8 water\cf2 :\
			startingConcentration = \cf10 0\cf2 \
		\}\
		\
	\cf7 //Set Formula Concentration\cf2 \
\cf7 //Update to use settings\cf2 \
		
\f2\b \cf4 let
\f1\b0 \cf2  formulaConcentration = \cf10 200.0\cf2 \
		\
	\cf7 //Set Ending Volume\cf2 \
		
\f2\b \cf4 let
\f1\b0 \cf2  endingVolume: \cf6 Double\cf2 ?\
		\
		
\f2\b \cf4 switch
\f1\b0 \cf2  \cf8 fortify\cf2 .\cf8 startOrEnd\cf2  \{\
		
\f2\b \cf4 case
\f1\b0 \cf2  .\cf8 start\cf2 :\
			endingVolume = 
\f2\b \cf4 nil
\f1\b0 \cf2 \
		
\f2\b \cf4 case
\f1\b0 \cf2  .\cf8 end\cf2 :\
			
\f2\b \cf4 let
\f1\b0 \cf2  volumeUnit: \cf6 UnitVolume\cf2 \
			\
			
\f2\b \cf4 switch
\f1\b0 \cf2  \cf8 fortify\cf2 .\cf8 volumeUnit\cf2  \{\
			
\f2\b \cf4 case
\f1\b0 \cf2  .\cf8 ml\cf2 :\
				volumeUnit = \cf6 UnitVolume\cf2 .\cf9 milliliters\cf2 \
			
\f2\b \cf4 case
\f1\b0 \cf2  .\cf8 oz\cf2 :\
				volumeUnit = \cf6 UnitVolume\cf2 .\cf9 fluidOunces\cf2 \
			\}\
			\
			
\f2\b \cf4 let
\f1\b0 \cf2  volumeAsMeasurement = \cf6 Measurement\cf2 (\cf9 value\cf2 : \cf8 fortify\cf2 .\cf8 volume\cf2 , \cf9 unit\cf2 : volumeUnit)\
			endingVolume = volumeAsMeasurement.\cf9 converted\cf2 (\cf9 to\cf2 : \cf6 UnitVolume\cf2 .\cf9 fluidOunces\cf2 ).\cf9 value\cf2 \
		\}\
		\
	\cf7 //Set Ending Concentration\cf2 \
		
\f2\b \cf4 let
\f1\b0 \cf2  endingConcentration = \cf8 fortify\cf2 .\cf8 concentration\cf2 \
		\
	\cf7 //Calculate\cf2 \
		
\f2\b \cf4 let
\f1\b0 \cf2  amountOfPowerPerVolumeToAdd: \cf6 Double\cf2 \
		\
		
\f2\b \cf4 switch
\f1\b0 \cf2  \cf8 fortify\cf2 .\cf8 startOrEnd\cf2  \{\
		
\f2\b \cf4 case
\f1\b0 \cf2  .\cf8 start\cf2 :\
			amountOfPowerPerVolumeToAdd = ( (\cf6 Double\cf2 (startingConcentration) * startingVolume!) - (\cf6 Double\cf2 (endingConcentration) * startingVolume!) ) / (\cf6 Double\cf2 (endingConcentration) - formulaConcentration)\
		
\f2\b \cf4 case
\f1\b0 \cf2  .\cf8 end\cf2 :\
			amountOfPowerPerVolumeToAdd = \cf10 0\cf2 \
		\}\
		\
\cf7 //		let amountOfPowderInFluidOuncesToAdd = amountOfPowerPerVolumeToAdd * startingVolume!\cf2 \
		\
		
\f2\b \cf4 let
\f1\b0 \cf2  amountofPowderToAdd = amountOfPowerPerVolumeToAdd / \cf10 0.2\cf2 \
		\
		\cf9 print\cf2 (\cf12 "Starting Volume: \cf2 \\(startingVolume)\cf12 "\cf2 )\
		\cf9 print\cf2 (\cf12 "Starting Concentration: \cf2 \\(startingConcentration)\cf12 "\cf2 )\
		\cf9 print\cf2 (\cf12 "Powder Concentration: \cf2 \\(formulaConcentration)\cf12 "\cf2 )\
		\cf9 print\cf2 (\cf12 "Ending Volume: \cf2 \\(endingVolume)\cf12 "\cf2 )\
		\cf9 print\cf2 (\cf12 "Ending Concentration: \cf2 \\(endingConcentration)\cf12 "\cf2 )\
		\cf9 print\cf2 (\cf12 ""\cf2 )\
		\cf9 print\cf2 (\cf12 "amountOfPowerPerVolumeToAdd: \cf2 \\(amountOfPowerPerVolumeToAdd)\cf12 "\cf2 )\
\cf7 //		print("amountOfPowderInFluidOuncesToAdd: \\(amountOfPowderInFluidOuncesToAdd)")\cf2 \
		\cf9 print\cf2 (\cf12 "amountofPowderToAdd: \cf2 \\(amountofPowderToAdd)\cf12 "\cf2 )\
		\
		\cf7 //		print("A, initial concentration: \\(a)")\cf2 \
		\cf7 //		print("B, scoop concentration: \\(b)")\cf2 \
		\cf7 //		print("C, final concentration: \\(c)")\cf2 \
		\cf7 //		print("X, initial volume: \\(x)")\cf2 \
		\
		\
		\
		\
		\
		\
		\
		\
		\
		\
		\
		\
		\
		\
		\
\cf7 //	//Set Additional Volume Unit\cf2 \
\cf7 //		let additionalVolumeUnit: UnitVolume\cf2 \
\cf7 //\cf2 \
\cf7 //		switch Settings.fortifyAdditionalVolumeUnit \{\cf2 \
\cf7 //		case .tsp:\cf2 \
\cf7 //			additionalVolumeUnit = UnitVolume.teaspoons\cf2 \
\cf7 //		case .tbsp:\cf2 \
\cf7 //			additionalVolumeUnit = UnitVolume.tablespoons\cf2 \
\cf7 //		case .ml:\cf2 \
\cf7 //			additionalVolumeUnit = UnitVolume.milliliters\cf2 \
\cf7 //		case .scoop:\cf2 \
\cf7 //			let coefficientVolumeUnit: UnitVolume\cf2 \
\cf7 //\cf2 \
\cf7 //			switch Settings.formulaScoopSizeUnit \{\cf2 \
\cf7 //			case .tsp:\cf2 \
\cf7 //				coefficientVolumeUnit = UnitVolume.teaspoons\cf2 \
\cf7 //			case .tbsp:\cf2 \
\cf7 //				coefficientVolumeUnit = UnitVolume.tablespoons\cf2 \
\cf7 //			case .ml:\cf2 \
\cf7 //				coefficientVolumeUnit = UnitVolume.milliliters\cf2 \
\cf7 //			\}\cf2 \
\cf7 //\cf2 \
\cf7 //			let coefficientVolumeAsMeasurement = Measurement(value: 1, unit: UnitVolume.liters)\cf2 \
\cf7 //			let coefficientVolume = coefficientVolumeAsMeasurement.converted(to: coefficientVolumeUnit).value\cf2 \
\cf7 //			let scoopCoefficient = Settings.formulaScoopSize / coefficientVolume\cf2 \
\cf7 //\cf2 \
\cf7 //			additionalVolumeUnit = UnitVolume(symbol: "sc", converter: UnitConverterLinear(coefficient: scoopCoefficient))\cf2 \
\cf7 //		\}\cf2 \
\cf7 //\cf2 \
\cf7 //	//Set Additional Concentration\cf2 \
\cf7 //		let additionalConcentration = fortify.concentration - Settings.formulaConcentration\cf2 \
\cf7 //\cf2 \
\cf7 //	//Set Volume\cf2 \
\cf7 //		let volumeUnit: UnitVolume\cf2 \
\cf7 //\cf2 \
\cf7 //		switch fortify.volumeUnit \{\cf2 \
\cf7 //		case .ml:\cf2 \
\cf7 //			volumeUnit = UnitVolume.milliliters\cf2 \
\cf7 //		case .oz:\cf2 \
\cf7 //			volumeUnit = UnitVolume.fluidOunces\cf2 \
\cf7 //		\}\cf2 \
\cf7 //\cf2 \
\cf7 //		let volumeAsMeasurement = Measurement(value: fortify.volume, unit: volumeUnit)\cf2 \
\cf7 //		let volume = volumeAsMeasurement.converted(to: additionalVolumeUnit).value\cf2 \
\cf7 //\cf2 \
\cf7 //	//Calculate and Answer\cf2 \
\cf7 //\cf2 \
		
\f2\b \cf4 let
\f1\b0 \cf2  a = \cf10 20.0\cf2 \
		
\f2\b \cf4 let
\f1\b0 \cf2  b = \cf10 200.0\cf2 \
		
\f2\b \cf4 let
\f1\b0 \cf2  c = \cf10 24.0\cf2 \
		
\f2\b \cf4 let
\f1\b0 \cf2  x = \cf10 20.0\cf2 \
\
		
\f2\b \cf4 let
\f1\b0 \cf2  d = ( (a * x) - (c * x) ) / (c - b)\
\
\cf7 //		print("A, initial concentration: \\(a)")\cf2 \
\cf7 //		print("B, scoop concentration: \\(b)")\cf2 \
\cf7 //		print("C, final concentration: \\(c)")\cf2 \
\cf7 //		print("X, initial volume: \\(x)")\cf2 \
\
		\cf9 print\cf2 (d)\
\cf7 //\cf2 \
\cf7 //\cf2 \
\cf7 //\cf2 \
\cf7 //\cf2 \
\cf7 //\cf2 \
		\
		\
		\
\cf7 //		let a = Double(Settings.formulaConcentration)\cf2 \
\cf7 //		let b = 200.0\cf2 \
\cf7 //		let c = Double(fortify.concentration)\cf2 \
\cf7 //		let x = 20.0\cf2 \
\cf7 //\cf2 \
\cf7 //		let d = ( (a * x) - (c * x) ) / (c - b)\cf2 \
\cf7 //\cf2 \
\cf7 //		print("A, initial concentration: \\(a)")\cf2 \
\cf7 //		print("B, scoop concentration: \\(b)")\cf2 \
\cf7 //		print("C, final concentration: \\(c)")\cf2 \
\cf7 //		print("X, initial volume: \\(x)")\cf2 \
\cf7 //\cf2 \
\cf7 //		print(d)\cf2 \
\cf7 //\cf2 \
\cf7 //		print(d * 200)\cf2 \
\cf7 //\cf2 \
\cf7 //		print(24 * (d + 20))\cf2 \
		\
		\
		\
		\
		\
		\
		\
		\
		\
		\
		\
		\
\cf7 //		let neededScoops = formulaKcalConvertToScoop(endingKcal: fortify.concentration)\cf2 \
\cf7 //		print("We need \\(neededScoops) scoops.")\cf2 \
\cf7 //\cf2 \
\cf7 //		let mixedVolumeUnit: UnitVolume\cf2 \
\cf7 //\cf2 \
\cf7 //		switch Settings.formulaWaterMixVolumeUnit \{\cf2 \
\cf7 //		case .oz:\cf2 \
\cf7 //			mixedVolumeUnit = UnitVolume.fluidOunces\cf2 \
\cf7 //		case .ml:\cf2 \
\cf7 //			mixedVolumeUnit = UnitVolume.milliliters\cf2 \
\cf7 //		\}\cf2 \
\cf7 //\cf2 \
\cf7 //		let adjustedScoopsNeeded = Settings.formulaWaterMixVolume / volumeAsMeasurement.converted(to: mixedVolumeUnit).value\cf2 \
\cf7 //\cf2 \
\cf7 //		let mixedScoops = neededScoops / adjustedScoopsNeeded\cf2 \
		\
		\
		\
		\
		\
\cf7 //\cf2 \
\cf7 //		let volumeRatio = volume / 89\cf2 \
\cf7 //\cf2 \
\cf7 //		let answer = volumeRatio * 0.25 * Double(additionalConcentration)\cf2 \
\cf7 //		let roundedVolume = round(Double(volumeTextField.text!)! * 100) / 100.0\cf2 \
\cf7 //\cf2 \
\cf7 //		if answer >= 0.0625 \{\cf2 \
\cf7 //			answerText.text = "****So I need to add \\(roundToFraction(answer)) \\(Settings.fortifyAdditionalVolumeUnit.description()) of formula to\\u\{00a0\}\\(roundedVolume.stringWithoutZeroFraction)\\u\{00a0\}\\(volumeUnitSelector.titleForSegment(at: volumeUnitSelector.selectedSegmentIndex)!) of \\(Settings.formulaConcentration) kcal milk.****"\cf2 \
\cf7 //		\} else \{\cf2 \
\cf7 //			answerText.text = "There is no need to fortify this milk."\cf2 \
\cf7 //		\}\cf2 \
\cf7 //\cf2 \
\cf7 //		if animate \{\cf2 \
\cf7 //			UIView.animate(withDuration: 0.5, animations: \{\cf2 \
\cf7 //				self.answerText.transform = CGAffineTransform(scaleX: 2, y: 2)\cf2 \
\cf7 //				self.answerText.transform = CGAffineTransform(scaleX: 1, y: 1)\cf2 \
\cf7 //			\})\cf2 \
\cf7 //		\}\cf2 \
	\}}